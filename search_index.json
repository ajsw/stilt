[
["index.html", "STILT Documentation 1 Introduction 1.1 Quick-start", " STILT Documentation Ben Fasoli 1 Introduction This documentation is for for a version of the Stochastic Time Inverted Lagrangian Transport (STILT) model, available on Github. 1.1 Quick-start Done this before and just looking to start a new project? Initialize myproject with Rscript -e &quot;uataq::stilt_init('myproject')&quot; Edit r/run_stilt.r to set receptor timing/locations and model parameters Run the model with Rscript r/run_stilt.r "],
["installation.html", "2 Installation 2.1 Software dependencies 2.2 Install methods", " 2 Installation 2.1 Software dependencies STILT has been compiled to run on UNIX platforms (Mac, Linux). Required software includes R (v &gt;= 3.25), https://www.r-project.org/ dplyr package, for speed and data manipulation parallel package, for parallel computation on a single node raster package, for raster-based spatial analysis rslurm package, for parallel computation across multiple nodes uataq package, for data manipulation One of the following Fortran compilers Portland Group Compiler (pgf90) Intel Fortran Compiler (ifort) GNU Fortan Compiler (gfortran) G95 Fortran Compiler (g95) Git, https://git-scm.com/ 2.2 Install methods Two options exist to initialize a new STILT project. 2.2.1 R (preferred) This method uses R to initialize a new project. stilt_init() in the UATAQ R package, which includes tools for trace gas data manipulation and analysis, is a wrapper around several system commands that do much of the heavy lifting. The UATAQ package is available on Github and can be installed in R using devtools. if (!require(&#39;devtools&#39;)) install.packages(&#39;devtools&#39;) devtools::install_github(&#39;benfasoli/uataq&#39;) A new STILT project can then be initialized in plain R code with uataq::stilt_init(&#39;myproject&#39;) This function 1. clones the stilt Github repository into a local stilt directory which is then renamed myproject 2. renames this directory to myproject 3. runs the myproject/setup executable, which compiles and moves the hymodelc executable to the exe directory 4. populates the project name and paths in myproject/r/run_stilt.r 2.2.2 Manual While the R method is preferable since it streamlines the process of initializing new projects, the same can be accompolished manually. To reproduce the results above, Clone the repository and set the name of the project git clone https://github.com/benfasoli/stilt mv stilt myproject Compile and move the hymodelc executable to the exe directory using the provided setup script (or manually) cd myproject chmod +x setup ./setup Finally, edit r/run_stilt.r setting project, paths, receptor timing/locations, and model parameters. "],
["structure.html", "3 Repository structure 3.1 exe/ 3.2 fortran/ 3.3 out/ 3.4 r/", " 3 Repository structure The repository contains a number of directories that serve as the framework for the model. Initially, only the r/ and fortran/ directories are fully populated while fortran/ and setup are used for the project initialization and compilation of hymodelc. exe/ hymodelc ... fortran/ ... out/ #_yyyymmddHH_lati_long_zagl ... r/ src/ ... dependencies.r run_stilt.r setup 3.1 exe/ Location for the compiled hymodelc executable as well as shared model configuration files, such as ASCDATA.CFG, CONC.CFG, LANDUSE.ASC, ROUGLEN.ASC, etc. 3.2 fortran/ hymodelc fortran source code and make file used for compilation. hymodelc can be compiled manually with cd fortran make mv hymodelc ../exe/hymodelc cd .. chmod +x exe/hymodelc or using the included setup script (found in the base directory) which executes the above commands. 3.3 out/ Initially empty, this folder propagates subdirectories when simulations begin. See Outputs. 3.4 r/ run_stilt.r is used to adjust model parameters, execute the simulations, and produce upstream influence footprints. See Workflow. dependencies.r is used to load the necessary functions and packages for run_stilt.r and replicates the functions available in the R environment across multiple processes running on separate cores/nodes. The src/ subdirectory contains the bulk of the STILT source code but should not need to be modified. Each file contains a single R function with metadata documenting function arguments and usage instructions for making programatic adjustment to STILT’s workflow. "],
["workflow.html", "4 Workflow &amp; run_stilt.r 4.1 Computational arguments 4.2 Simulation timing 4.3 Receptor locations 4.4 Meteorological data input 4.5 Model control 4.6 Transport and dispersion 4.7 Footprint gridding 4.8 Functionality", " 4 Workflow &amp; run_stilt.r 4.1 Computational arguments Arg Description project Project name stilt_wd Working directory for the given project lib.loc Path to R package installations, passed to library() rm_dat Logical indicating whether to delete PARTICLE.DAT after each simulation. Default to TRUE to reduce disk space since all of the trajectory information is also stored in STILT_OUTPUT.rds alongside the calculated upstream influence footprint n_nodes If using SLURM for job submission, number of nodes to utilize n_cores Number of cores per node to parallelize simulations by receptor locations and times n_cores_grid Number of cores per process to utilize for gridding computing gaussian kernels slurm Logical indicating the use of rSLURM to submit job(s) slurm_options Named list of options passed to sbatch using rslurm::slurm_apply, which typically includes time, account, and partition values 4.2 Simulation timing Arg Description t_start/t_end Simulation timing, formatted as 'yyyy-mm-dd HH:MM:SS' UTC run_times Hourly simulations spanning t_start through t_end 4.3 Receptor locations Arg Description lati Receptor latitude(s), in degrees. Can be a single value or a vector with length equal to length(run_times) of receptor latitudes long Receptor longitude(s), in degrees. Can be a single value or a vector with length equal to length(run_times) of receptor longitudes zagl Receptor height(s), in meters above ground level. Can be a single value or a vector with length equal to length(run_times) of receptor heights 4.4 Meteorological data input Arg Description met_directory Full directory path in which ARL compatible meteorological data files can be found met_file_format strftime compatible file naming convention to identify meteorological data files necessary for the timing of the simulation, such as %Y%m%d.%Hz.hrrra. Also accepts wildcards that match regular expression patterns passed to dir(), such as wrfout_d0*_jul.arl 4.5 Model control Arg Description delt integration timestep [min]; if set to 0.0, then timestep is dynamically determined n_hours Number of hours to run each simulation; negative indicates backward in time numpar number of particles to be run; defaults to 200 outdt interval [min] to output data to PARTICLE.DAT; defaults to 0.0, which outputs at every timestep run_trajec Logical indicating whether to produce new trajectories with hymodelc. If FALSE, will load the previous STILT_OUTPUT.rds for regridding purposes varsiwant character vector of 4-letter hymodelc variables. Options include NULL for all variables, or a vector containing a minimum of c('time', 'indx', 'lati', 'long', 'zagl', 'foot') and optionally containing ‘sigw’, ‘tlgr’, ‘zsfc’, ‘icdx’, ‘temp’, ‘samt’, ‘shtf’, ‘tcld’, ‘dmas’, ‘dens’, ‘rhfr’, ‘sphu’, ‘solw’, ‘lcld’, ‘zloc’, ‘dswf’, ‘wout’, ‘mlht’, ‘rain’, ‘crai’ 4.6 Transport and dispersion Arg Description iconvect flag for convection. If set to 1, then runs excessive convection as described in Gerbig et al., 2003. For specialized RAMS output, the particles will be vertically redistributed according to the output convective mass fluxes; defaults to 0 isot flag used to set the isotropic turbulence option; defaults to 0 to compute horizontal turbulence from wind field deformation. Setting to 1 results in the horizontal turbulence to be the same in both the u and v directions mgmin Needs documentation ndump flag to dump all particle/puff points at the end of a simulation to a file called PARDUMP. This can be read at the start of a new simulation to continue the previous calculation. Valid settings include 0 (no i/o), 1 (read/write), 2 (read only), 3 (write only); defaults to 0 nturb no turbulence flag; defaults to 0, which includes turbulence rather than simulating mean trajectories outfrac the fraction of the particles that are allowed to leave the model domain (given by met data); defaults to 0.9. If exceeded, the model stops random flag that tells the random number generator whether to have a different random sequence for each model run (0 - false, 1 - true); defaults to 1 tlfrac the fraction of the lagrangian timescale TL to set as timestep in dispersion subroutine. The smaller this fraction is, the more finely the turbulence is resolved; defaults to 0.1 tratio maximum fraction of gridcell to be travelled by a particle in a single integration timestep. This determines the timestep if DELT is set to be dynamic veght height below which a particle’s time spent is tallied; defaults to 0.5, which specifies half of the PBL. Setting &lt;=1.0 specifies a fraction of the boundary layer height, and setting &gt;1.0 specifies a height above ground in meters w_option vertical motion calculation method. 0: use vertical velocity from data, 1: isob, 2: isen, 3: dens, 4: sigma; defaults to 0 winderrtf flag that specifies whether to have particle motions be affected by horizontal wind errors; defaults to 0. If set to 1, then STILT looks for a file called “WINDERR” that has four lines: 1. Standard deviation of errors [m/s], 2. Correlation timescale of errors [min], 3. Vertical correlation lengthscale of errors [m], 4. Horizontal correlation lengthscale of errors [km]. All statistical properties are applied equally in the u and v wind components z_top top of model domain, in meters above ground level; defaults to 25000.0 zicontroltf flag that specifies whether to scale the PBL heights in STILT uniformly in the entire model domain; defaults to 0. If set to 1, then STILT looks for a file called “ZICONTROL” that specifies the scaling for the PBL height. The first line indicates the number of hours that the PBL height will be changed, and each subsequent line indicates the scaling factor for that hour 4.7 Footprint gridding Arg Description xmn grid start longitude, in degrees from -180 to 180 xmx grid end longitude, in degrees from -180 to 180 ymn grid start latitude, in degrees from -180 to 180 ymx grid end latitude, in degrees from -180 to 180 xres resolution for longitude grid, in degrees yres resolution for latitude grid, in degrees 4.8 Functionality After turning the desired knobs from the sections above, the script symlinks the meteorological data path to the user’s home directory, with the default format paste0('m', project). This is done to avoid issues with paths longer than 80 characters, which will result in unsuccessful fortran simulations. User parameters are then passed to stilt_apply, which chooses the appropriate function to dispatch the simulations. If using SLURM for job submission, stilt_apply will use the rslurm package to submit jobs across n_nodes and n_cores per node. If running in parallel on a single node without SLURM, stilt_apply will use the parallel package to run simulations on the current node across n_cores. Otherwise, stilt_apply will run the simulations serially using lapply(). "],
["outputs.html", "5 Outputs 5.1 FOOTPRINT.nc 5.2 STILT_OUTPUT.rds", " 5 Outputs The out/ directory contains model parameters and outputs in subdirectories organized by receptor timing and locations. The directories are named with the convention #_yyyymmddHH_long_lati_zagl where Abbreviation Value # Receptor index yyyy Year (start) mm Month (start) dd Day (start) HH Hour (start) lati Receptor latitude (deg) long Receptor longitude (deg) zagl Receptor height above ground (m) These directories also contain symbolic links to the files in exe/ including the hymodelc executable. When the model runs trajectory simulations, diagnostic information (hymodelc.out) and model output (FOOTPRINT.nc, STILT_OUTPUT.rds) are also stored here. 5.1 FOOTPRINT.nc Footprint matrices are written to FOOTPRINT.nc with raster::writeRaster(). The areal extent of these footprints is trimmed to only contain the grid containing particle locations to help reduce file size. The bounds of the grid are included in the netcdf metadata but the extent of footprints will likely differ. 5.2 STILT_OUTPUT.rds Serialized R data file that contains a list of the particle trajectories and the footprint raster. This allows regridding of the footprints without recalculating particle trajectories. Load into R with out &lt;- readRDS('STILT_OUTPUT.rds'). This object is structured as List of 5 $ runtime : POSIXct[1:1], format: &quot;2015-06-16&quot; $ file : chr &quot;stilt_wd/out/1_2015061600_-111.847672_40.766189_10/STILT_OUTPUT.rds&quot; $ receptor :&#39;data.frame&#39;: 1 obs. of 4 variables: ..$ run_time : POSIXct[1:1], format: &quot;2015-06-16&quot; ..$ lati : num 40.8 ..$ long : num -112 ..$ zagl : num 10 $ footprint:List of 4 ..$ file : chr &quot;stilt_wd/out/1_2015061600_-111.847672_40.766189_10/FOOTPRINT.nc&quot; ..$ data : Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots .. ... ..$ resolution:List of 2 .. ..$ x: num 0.002 .. ..$ y: num 0.002 ..$ domain :List of 2 .. ..$ long: num [1:2] -124 -112 .. ..$ lati: num [1:2] 34.3 40.8 $ particle :&#39;data.frame&#39;: n obs. of 29 variables: .. ... Particle trajectory data is stored in a data frame with columns corresponding with varsiwant and can be accessed with out$particle. The footprint raster can be accessed with out$footprint. For more information about raster manipulation, the Raster R package is a good place to start. "]
]
